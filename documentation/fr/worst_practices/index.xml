<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauvaises pratiques on Documentation Selenium</title>
    <link>https://www.selenium.dev/documentation/fr/worst_practices/</link>
    <description>Recent content in Mauvaises pratiques on Documentation Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://www.selenium.dev/documentation/fr/worst_practices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Captchas</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/captchas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/captchas/</guid>
      <description>CAPTCHA, abréviation de Completely Automated Public Turing test to tell Computers and Humans Apart, est explicitement conçu pour empêcher l&amp;rsquo;automatisation, alors n&amp;rsquo;essayez pas! Il existe deux stratégies principales pour contourner les chèques CAPTCHA:
 Désactivez CAPTCHA dans votre environnement de test Ajoutez un crochet pour permettre aux tests de contourner le CAPTCHA  </description>
    </item>
    
    <item>
      <title>Téléchargement de fichier</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/file_downloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/file_downloads/</guid>
      <description>Bien qu&amp;rsquo;il soit possible de démarrer un téléchargement en cliquant sur un lien avec un navigateur sous le contrôle de Selenium, l&amp;rsquo;API n&amp;rsquo;expose pas la progression du téléchargement, ce qui n&amp;rsquo;est pas idéal pour tester les fichiers téléchargés. En effet, le téléchargement de fichiers n&amp;rsquo;est pas considéré comme un aspect important d&#39;émuler l&amp;rsquo;interaction des utilisateurs avec la plate-forme Web. À la place, recherchez le lien à l&amp;rsquo;aide de Selenium (et tous les cookies requis) et le passer à une bibliothèque de requêtes HTTP comme libcurl.</description>
    </item>
    
    <item>
      <title>Codes réponse HTTP</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/http_response_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/http_response_codes/</guid>
      <description>Pour certaines configurations de navigateur dans Selenium RC, Selenium a agi comme un proxy entre le navigateur et le site étant automatisé. Cela signifiait que tout le trafic du navigateur passait par Selenium pourrait être capturé ou manipulé. La méthode captureNetworkTraffic() censé capturer tout le trafic réseau entre le navigateur et le site étant automatisé, y compris les codes de réponse HTTP.
Selenium WebDriver est une approche complètement différente à l&amp;rsquo;automatisation du navigateur, préférant agir plus comme un utilisateur et cela est représenté dans la façon dont vous écrivez des tests avec WebDriver.</description>
    </item>
    
    <item>
      <title>Gmail, email and logins Facebook</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/gmail_email_and_facebook_logins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/gmail_email_and_facebook_logins/</guid>
      <description>Pour plusieurs raisons, vous connecter à des sites comme Gmail et Facebook l&amp;rsquo;utilisation de WebDriver n&amp;rsquo;est pas recommandée. En plus d&#39;être contre les conditions d&amp;rsquo;utilisation de ces sites (où vous risquez de fermer le compte), c&amp;rsquo;est lent et peu fiable.
La pratique idéale consiste à utiliser les API proposées par les fournisseurs de messagerie, ou dans le cas de Facebook le service des outils de développement qui expose une API pour créer des comptes de test, des amis, etc.</description>
    </item>
    
    <item>
      <title>Dépéndence des tests</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/test_dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/test_dependency/</guid>
      <description>Une idée courante et une idée fausse concernant les tests automatisés concernent ordre de test spécifique. Vos tests devraient pouvoir s&amp;rsquo;exécuter dans n&amp;rsquo;importe quel ordre, et ne pas compter sur d&amp;rsquo;autres tests pour réussir pour réussir.</description>
    </item>
    
    <item>
      <title>Test de performance</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/performance_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/performance_testing/</guid>
      <description>Test de performances avec Selenium et WebDriver n&amp;rsquo;est généralement pas conseillé. Pas parce qu&amp;rsquo;il est incapable mais parce qu&amp;rsquo;il n&amp;rsquo;est pas optimisé pour le travail et il est peu probable que vous obteniez de bons résultats.
Cela peut sembler idéal pour tester les performances dans le contexte de l&amp;rsquo;utilisateur mais une suite de tests WebDriver sont soumis à de nombreux points de fragilité externe et interne qui échappent à votre contrôle; par exemple la vitesse de démarrage du navigateur, vitesse des serveurs HTTP, réponse des serveurs tiers qui hébergent JavaScript ou CSS, et la pénalité d&amp;rsquo;instrumentation de l&amp;rsquo;implémentation WebDriver elle-même.</description>
    </item>
    
    <item>
      <title>Link spidering</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/link_spidering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/link_spidering/</guid>
      <description>Utilisation de WebDriver pour parcourir des liens n&amp;rsquo;est pas une pratique recommandée non pas parce que cela ne peut pas être fait, mais parce que ce n&amp;rsquo;est certainement pas l&amp;rsquo;outil le plus idéal. WebDriver a besoin de temps pour démarrer, et peut prendre plusieurs secondes jusqu&#39;à une minute en fonction de la façon dont votre test est écrit, juste pour accéder à la page et parcourir le DOM.
Au lieu d&amp;rsquo;utiliser WebDriver pour cela, vous pourriez économiser une tonne de temps en exécutant une commande curl, ou en utilisant une bibliothèque telle que BeautifulSoup puisque ces méthodes ne reposent pas sur la création d&amp;rsquo;un navigateur et la navigation vers une page.</description>
    </item>
    
  </channel>
</rss>