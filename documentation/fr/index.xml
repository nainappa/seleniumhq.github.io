<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Le Projet d&#39;Automatisation de Navigateur Selenium on Documentation Selenium</title>
    <link>https://www.selenium.dev/documentation/fr/</link>
    <description>Recent content in Le Projet d&#39;Automatisation de Navigateur Selenium on Documentation Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://www.selenium.dev/documentation/fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Capabilities partagées</title>
      <link>https://www.selenium.dev/documentation/fr/driver_idiosyncrasies/shared_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/driver_idiosyncrasies/shared_capabilities/</guid>
      <description>Afin de créer une nouvelle session par Selenium WebDriver, l&amp;rsquo;extrémité locale doit fournir les capacités de base à l&amp;rsquo;extrémité distante. L&amp;rsquo;extrémité distante utilise le même ensemble de capacités pour créer une session et décrit les fonctionnalités de la session actuelle.
WebDriver offre des capacités que chaque télécommande fin soutiendra/devrait soutenir la mise en œuvre. Voici les fonctionnalités prises en charge par WebDriver:
browserName: Cette capacité est utilisée pour définir le browserName pour une session donnée.</description>
    </item>
    
    <item>
      <title>Captchas</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/captchas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/captchas/</guid>
      <description>CAPTCHA, abréviation de Completely Automated Public Turing test to tell Computers and Humans Apart, est explicitement conçu pour empêcher l&amp;rsquo;automatisation, alors n&amp;rsquo;essayez pas! Il existe deux stratégies principales pour contourner les chèques CAPTCHA:
 Désactivez CAPTCHA dans votre environnement de test Ajoutez un crochet pour permettre aux tests de contourner le CAPTCHA  </description>
    </item>
    
    <item>
      <title>Comprendre les composants</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/understanding_the_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/understanding_the_components/</guid>
      <description>Pour créer une suite de tests à l&amp;rsquo;aide de WebDriver, vous devrez comprendre et utiliser efficacement un certain nombre de composants différents. logiciel, différentes personnes utilisent des termes différents pour la même idée. une ventilation de la façon dont les termes sont utilisés dans cette description.
Terminologie  API: Interface de programmation d&amp;rsquo;application. Il s&amp;rsquo;agit de l&amp;rsquo;ensemble des &amp;ldquo;commandes&amp;rdquo; vous utilisez pour manipuler WebDriver. Bibliothèque: Un module de code qui contient les API et le code nécessaires Les bibliothèques sont spécifiques à chaque liaison de langue, par exemple .</description>
    </item>
    
    <item>
      <title>Copyright et attributions</title>
      <link>https://www.selenium.dev/documentation/fr/front_matter/copyright_and_attributions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/front_matter/copyright_and_attributions/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 The Documentation of Selenium Copyright &amp;copy; 2013-2020 , Software Freedom Conservancy.
Every effort has been made to make this documentation as complete and as accurate as possible, but no warranty or fitness is implied. The information provided is on an “as-is” basis. The authors and the publisher shall have neither liability nor responsibility to any person or entity with respect to any loss or damages arising from the information contained in this book.</description>
    </item>
    
    <item>
      <title>Installer les librairies Selenium</title>
      <link>https://www.selenium.dev/documentation/fr/selenium_installation/installing_selenium_libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/selenium_installation/installing_selenium_libraries/</guid>
      <description>Vous devez d&amp;rsquo;abord installer les fixations Selenium pour votre projet d&amp;rsquo;automatisation. Le processus d&amp;rsquo;installation des bibliothèques dépend de la langue que vous choisissez d&amp;rsquo;utiliser.
Java L&amp;rsquo;installation des bibliothèques Selenium pour Java peut être effectuée à l&amp;rsquo;aide de Maven. Ajoutez la dépendance selenium-java dans votre projet pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.X&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; La dépendance selenium-java prend en charge l&amp;rsquo;exécution de votre automatisation projet avec tous les navigateurs pris en charge par Selenium.</description>
    </item>
    
    <item>
      <title>Le projet Selenium et les outils</title>
      <link>https://www.selenium.dev/documentation/fr/introduction/the_selenium_project_and_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/introduction/the_selenium_project_and_tools/</guid>
      <description>Selenium contrôle les navigateurs Web Selenium est beaucoup de choses, mais à la base, c&amp;rsquo;est un ensemble d&amp;rsquo;outils pour l&amp;rsquo;automatisation du navigateur Web qui utilise les meilleures techniques disponibles pour contrôler à distance les instances du navigateur et émuler l&amp;rsquo;interaction d&amp;rsquo;un utilisateur avec le navigateur.
Il permet aux utilisateurs de simuler les activités courantes effectuées par les utilisateurs finaux; saisir du texte dans les champs, sélectionner des valeurs déroulantes et cocher des cases, et cliquer sur les liens dans les documents.</description>
    </item>
    
    <item>
      <title>Le serveur Remote WebDriver</title>
      <link>https://www.selenium.dev/documentation/fr/remote_webdriver/remote_webdriver_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/remote_webdriver/remote_webdriver_server/</guid>
      <description>Le serveur fonctionnera toujours sur la machine avec le navigateur que vous souhaitez tester. Le serveur peut être utilisé à partir de la ligne de commande ou via du code configuration.
Démarrage du serveur à partir de la ligne de commande Une fois que vous avez téléchargé selenium-server-standalone-{VERSION}.jar, placez-le sur l&amp;rsquo;ordinateur avec le navigateur que vous souhaitez tester. Ensuite, à partir de le répertoire avec le pot, exécutez ce qui suit:</description>
    </item>
    
    <item>
      <title>Navigateurs</title>
      <link>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/browsers/</guid>
      <description>Navigateurs consommateurs Le framework Selenium supporte officiellement les navigateurs suivants:
   Navigateur Mainteneur Versions supportées     Chrome Chromium Toutes versions   Firefox Mozilla 54 and plus récentes   Internet Explorer Selenium 6 et plus récentes   Opera Opera Chromium / Presto 10.5 et plus récentes   Safari Apple 10 et plus récentes    Navigateurs spécialisés Il existe également un ensemble de navigateurs spécialisés, utilisés typiquement dans des environnements de développement.</description>
    </item>
    
    <item>
      <title>Objectifs et fonctionnalitées</title>
      <link>https://www.selenium.dev/documentation/fr/grid/purposes_and_main_functionalities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/grid/purposes_and_main_functionalities/</guid>
      <description> Point d&amp;rsquo;entrée central pour tous les tests Gestion et contrôle des nœuds / environnement où s&amp;rsquo;exécutent les navigateurs Mise à l&#39;échelle Exécution de tests en parallèle Test multiplateforme L&#39;équilibrage de charge  </description>
    </item>
    
    <item>
      <title>Page object models</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/page_object_models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/page_object_models/</guid>
      <description>L&amp;rsquo;objet de page est un modèle de conception qui est devenu populaire dans l&amp;rsquo;automatisation des tests pour améliorer la maintenance des tests et réduire la duplication de code. Un objet page est un classe orientée objet qui sert d&amp;rsquo;interface à une page de votre AUT. le les tests utilisent ensuite les méthodes de cette classe d&amp;rsquo;objets de page chaque fois qu&amp;rsquo;ils ont besoin de interagir avec l&amp;rsquo;interface utilisateur de cette page.</description>
    </item>
    
    <item>
      <title>Selenium 1 (Selenium RC)</title>
      <link>https://www.selenium.dev/documentation/fr/legacy_docs/selenium_rc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/legacy_docs/selenium_rc/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Introduction Selenium RC was the main Selenium project for a long time, before the WebDriver/Selenium merge brought up Selenium 2, a more powerful tool. It is worth to highlight that Selenium 1 is not supported anymore.
How Selenium RC Works First, we will describe how the components of Selenium RC operate and the role each plays in running your test scripts.</description>
    </item>
    
    <item>
      <title>Tour rapide</title>
      <link>https://www.selenium.dev/documentation/fr/getting_started/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/getting_started/quick/</guid>
      <description>Selenium n&amp;rsquo;est pas juste un outil ou une API mais est composé de nombreux outils.
WebDriver Si vous débutez dans l&amp;rsquo;automatisation de test de site web desktop vous allez utiliser les APIs WebDriver. WebDriver utilise les APIs d&amp;rsquo;automatisation fournies par les distributeurs de navigateur pour les contrôler et exécuter les tests. C&amp;rsquo;est comme si un utilisateur réel utilisait le navigateur. Puisque WebDriver n&amp;rsquo;a pas besoin que ses APIs soient compilées avec le code de l&amp;rsquo;application testée, il est non intrusif par nature.</description>
    </item>
    
    <item>
      <title>A propos du test automatisé</title>
      <link>https://www.selenium.dev/documentation/fr/introduction/on_test_automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/introduction/on_test_automation/</guid>
      <description>Commencez par vous demander si vous avez vraiment besoin ou non d&amp;rsquo;un navigateur. Il est probable qu&#39;à un moment donné, si vous travaillez sur une application Web complexe, vous devrez ouvrir un navigateur et le tester.
Les tests fonctionnels pour l&amp;rsquo;utilisateur final, tels que les tests au sélénium, sont cependant coûteux à exécuter. En outre, ils nécessitent généralement une infrastructure substantielle être en place pour fonctionner efficacement. C&amp;rsquo;est une bonne règle de toujours se demander si ce que l&amp;rsquo;on veut tester peut être fait en utilisant des approches de test plus légères telles que des tests unitaires ou avec une approche de niveau inférieur.</description>
    </item>
    
    <item>
      <title>Capabilities spécifiques du Driver</title>
      <link>https://www.selenium.dev/documentation/fr/driver_idiosyncrasies/driver_specific_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/driver_idiosyncrasies/driver_specific_capabilities/</guid>
      <description>Firefox Définir les Capabilities à l&amp;rsquo;aide de &amp;ldquo;FirefoxOptions&amp;rdquo; FirefoxOptions est la nouvelle façon de définir les capacités de Firefox navigateur et doit généralement être utilisé de préférence à DesiredCapabilities.
Java Python C# Ruby JavaScript Kotlin FirefoxOptions options = new FirefoxOptions(); options.addPreference(&amp;#34;network.proxy.type&amp;#34;, 0); driver = new RemoteWebDriver(options);   from selenium.webdriver.firefox.options import Options options = Options() options.headless = True driver = webdriver.Firefox(options=options)   var options = new FirefoxOptions(); options.Proxy.Kind = ProxyKind.</description>
    </item>
    
    <item>
      <title>Composant d&#39;une Grid</title>
      <link>https://www.selenium.dev/documentation/fr/grid/components_of_a_grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/grid/components_of_a_grid/</guid>
      <description>Hub  Intermédiaire et gestionnaire Accepte les demandes d&amp;rsquo;exécution de tests Prend les instructions du client et les exécute à distance sur les nœuds Gère les threads  Un Hub est un point central où tous vos tests sont envoyés. Chaque grille de sélénium se compose exactement d&amp;rsquo;un concentrateur. Le hub doit être accessible des clients respectifs (c.-à-d. serveur CI, machine développeur, etc.) Le concentrateur connectera un ou plusieurs nœuds auquel les tests seront délégués.</description>
    </item>
    
    <item>
      <title>Conventions typographique</title>
      <link>https://www.selenium.dev/documentation/fr/front_matter/typographical_conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/front_matter/typographical_conventions/</guid>
      <description>Capitalisation des titres Il faut éviter la capitalisation du titre, comme A Very Fine Heading, et optez plutôt pour un titre très fin. Capitalisation gratuite ou casse de titre, montrent souvent un malentendu - ou un mépris pour - conventions orthographiques. Nous préférons ce que l&amp;rsquo;on appelle le &amp;ldquo;cas de peine&amp;rdquo;, avec un seul capital initial pour démarrer les en-têtes.
Longueur de la ligne Lors de la modification de la source de la documentation, qui est écrit en HTML simple, limitez la longueur de vos lignes à environ 72 caractères.</description>
    </item>
    
    <item>
      <title>Driver tiers et plugins</title>
      <link>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/third_party_drivers_and_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/third_party_drivers_and_plugins/</guid>
      <description>Selenium peut être étendu à travers l&amp;rsquo;utilisation de plugins. Vous trouverez ici un certain nombre de plugins créés et maintenus par des tierces parties. Pour de plus amples information sur la création de plugin ou pour en ajouter à la liste, consultez la documentation.
Veuillez noter que ces plugins ne sont pas supportés, maintenus ou hébergés par le projet Selenium. De plus, soyez avertis que les plugins listés ci-dessous ne sont pas nécessairement sous Apache License v.</description>
    </item>
    
    <item>
      <title>Installer les binaires WebDriver</title>
      <link>https://www.selenium.dev/documentation/fr/selenium_installation/installing_webdriver_binaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/selenium_installation/installing_webdriver_binaries/</guid>
      <description>Pour exécuter votre projet et contrôler le navigateur, vous devez installer des binaires WebDriver spécifiques au navigateur.
Téléchargez le binaire WebDriver pris en charge par votre navigateur et placez-le dans le CHEMIN système.</description>
    </item>
    
    <item>
      <title>Langue spécifique au domaine</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/domain_specific_language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/domain_specific_language/</guid>
      <description>Une langue spécifique au domaine (DSL) est un système qui fournit à l&amp;rsquo;utilisateur un moyen expressif de résoudre un problème. Il permet à un utilisateur de interagir avec le système à leurs conditions - pas seulement parler de programmeur.
Vos utilisateurs, en général, ne se soucient pas de l&amp;rsquo;apparence de votre site. Ils ne se soucient de la décoration, des animations ou des graphismes. Ils voulez utiliser votre système pour pousser leurs nouveaux employés à travers le processus avec une difficulté minimale; ils veulent réserver un voyage en Alaska; ils veulent configurer et acheter des licornes à prix réduit.</description>
    </item>
    
    <item>
      <title>Le client Remote WebDriver</title>
      <link>https://www.selenium.dev/documentation/fr/remote_webdriver/remote_webdriver_client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/remote_webdriver/remote_webdriver_client/</guid>
      <description>Pour exécuter un client WebDriver distant, nous devons d&amp;rsquo;abord nous connecter au RemoteWebDriver. Nous le faisons en pointant l&amp;rsquo;URL vers l&amp;rsquo;adresse du serveur exécutant nos tests. Afin de personnaliser notre configuration, nous avons défini les capacités souhaitées. Voici un exemple d&amp;rsquo;instanciation d&amp;rsquo;un objet WebDriver distant pointant vers notre serveur Web distant, www.example.com, exécuter nos tests sur Firefox.
Java Python C# Ruby JavaScript Kotlin FirefoxOptions firefoxOptions = new FirefoxOptions(); WebDriver driver = new RemoteWebDriver(new URL(&amp;#34;http://www.</description>
    </item>
    
    <item>
      <title>Les pré-requis de WebDriver</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/driver_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/driver_requirements/</guid>
      <description>Grâce à WebDriver, Selenium prend en charge tous les principaux navigateurs du marché tels que Chrom(ium), Firefox, Internet Explorer, Opera et Safari. Dans la mesure du possible, WebDriver pilote le navigateur en utilisant la prise en charge intégrée du navigateur pour l&amp;rsquo;automatisation, bien que tous les navigateurs n&amp;rsquo;aient pas de support officiel pour la télécommande.
L&amp;rsquo;objectif de WebDriver est d&#39;émuler l&amp;rsquo;interaction d&amp;rsquo;un utilisateur réel avec le navigateur le plus près possible.</description>
    </item>
    
    <item>
      <title>Migrating from RC to WebDriver</title>
      <link>https://www.selenium.dev/documentation/fr/legacy_docs/migrating_from_rc_to_webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/legacy_docs/migrating_from_rc_to_webdriver/</guid>
      <description>Comment migrer vers Selenium WebDriver Une question fréquente lors de l&amp;rsquo;adoption de Selenium 2 est la bonne chose à faire lors de l&amp;rsquo;ajout de nouveaux tests à un ensemble de tests existant? Utilisateurs nouveaux dans le Le framework peut commencer par utiliser les nouvelles API WebDriver pour écrire leurs tests. Mais qu&amp;rsquo;en est-il des utilisateurs qui ont déjà des suites de tests existants? Ce guide est conçu pour montrer comment migrer vos tests existants vers les nouvelles API, permettant à tous les nouveaux tests d&#39;être écrits en utilisant les nouvelles fonctionnalités offertes par WebDriver.</description>
    </item>
    
    <item>
      <title>Travailler avec les couleurs</title>
      <link>https://www.selenium.dev/documentation/fr/support_packages/working_with_colours/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/support_packages/working_with_colours/</guid>
      <description>Vous voudrez parfois valider la couleur de quelque chose dans le cadre de vos tests; le problème est que les définitions de couleurs sur le Web ne sont pas constantes. Ne serait-ce pas bien s&amp;rsquo;il y avait un moyen facile de comparer une représentation HEX d&amp;rsquo;une couleur avec une représentation RGB d&amp;rsquo;une couleur, ou une représentation RGBA d&amp;rsquo;une couleur avec une représentation HSLA d&amp;rsquo;une couleur?
Ne t&amp;rsquo;inquiètes pas. Il y a une solution: la classe Color!</description>
    </item>
    
    <item>
      <title>Téléchargement de fichier</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/file_downloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/file_downloads/</guid>
      <description>Bien qu&amp;rsquo;il soit possible de démarrer un téléchargement en cliquant sur un lien avec un navigateur sous le contrôle de Selenium, l&amp;rsquo;API n&amp;rsquo;expose pas la progression du téléchargement, ce qui n&amp;rsquo;est pas idéal pour tester les fichiers téléchargés. En effet, le téléchargement de fichiers n&amp;rsquo;est pas considéré comme un aspect important d&#39;émuler l&amp;rsquo;interaction des utilisateurs avec la plate-forme Web. À la place, recherchez le lien à l&amp;rsquo;aide de Selenium (et tous les cookies requis) et le passer à une bibliothèque de requêtes HTTP comme libcurl.</description>
    </item>
    
    <item>
      <title>Codes réponse HTTP</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/http_response_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/http_response_codes/</guid>
      <description>Pour certaines configurations de navigateur dans Selenium RC, Selenium a agi comme un proxy entre le navigateur et le site étant automatisé. Cela signifiait que tout le trafic du navigateur passait par Selenium pourrait être capturé ou manipulé. La méthode captureNetworkTraffic() censé capturer tout le trafic réseau entre le navigateur et le site étant automatisé, y compris les codes de réponse HTTP.
Selenium WebDriver est une approche complètement différente à l&amp;rsquo;automatisation du navigateur, préférant agir plus comme un utilisateur et cela est représenté dans la façon dont vous écrivez des tests avec WebDriver.</description>
    </item>
    
    <item>
      <title>Generer l&#39;état de l&#39;application</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/generating_application_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/generating_application_state/</guid>
      <description>Le sélénium ne doit pas être utilisé pour préparer un cas de test. Tous répétitifs les actions et les préparatifs pour un test élémentaire devraient être effectués par méthodes. Par exemple, la plupart des interfaces utilisateur Web ont une authentification (par exemple, une connexion forme). Éliminer la connexion via un navigateur Web avant chaque test améliorer à la fois la vitesse et la stabilité du test. Une méthode devrait être créé pour accéder à l&amp;rsquo;AUT * (par exemple, en utilisant une API pour vous connecter et définir un biscuit).</description>
    </item>
    
    <item>
      <title>Installer le serveur Standalone</title>
      <link>https://www.selenium.dev/documentation/fr/selenium_installation/installing_standalone_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/selenium_installation/installing_standalone_server/</guid>
      <description>Si vous prévoyez d&amp;rsquo;utiliser [Grid] (/grid/), vous devez télécharger le [selenium-server-standalone JAR] (https://selenium.dev/downloads/). Tous les composants sont disponibles via selenium-server. Le JAR autonome contient tout, y compris le serveur Selenium distant et les liaisons côté client. Cela signifie que si vous utilisez le la jar selenium-server-standalone dans votre projet, vous n&amp;rsquo;avez pas besoin d&amp;rsquo;ajouter de sélénium-java ou un le jar spécifique au navigateur.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;selenium-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.X&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; </description>
    </item>
    
    <item>
      <title>Localiser des éléments</title>
      <link>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/locating_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/locating_elements/</guid>
      <description>Localiser des éléments Une des techniques fondamentales à maîtriser lorsque l&amp;rsquo;on utilise WebDriver consiste à chercher des éléments sur une page. WebDriver offre pour cela un ensemble pré-défini de type de selecteurs, parmi lesquels la recherche d&amp;rsquo;une élément par son attribut ID:
Java Python C# Ruby JavaScript Kotlin WebElement cheese = driver.findElement(By.id(&amp;#34;fromage&amp;#34;));   driver.find_element(By.ID, &amp;#34;fromage&amp;#34;)   IWebElement element = driver.FindElement(By.Id(&amp;#34;fromage&amp;#34;));   cheese = driver.find_element(id: &amp;#39;cheese&amp;#39;)   const fromage = driver.</description>
    </item>
    
    <item>
      <title>Manipulation du navigateur</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/browser_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/browser_manipulation/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check Add Ruby executables to your PATH checkbox. To drive any browser, you have to install selenium-webdriver Ruby gem.</description>
    </item>
    
    <item>
      <title>Mettre en place votre propre Grid</title>
      <link>https://www.selenium.dev/documentation/fr/grid/setting_up_your_own_grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/grid/setting_up_your_own_grid/</guid>
      <description>Pour utiliser la grille de Selenium, vous devez maintenir votre propre infrastructure pour les nœuds. Comme cela peut être un effort lourd et intense en temps, de nombreuses organisations utilisent des fournisseurs IaaS comme Amazon EC2 et Google Compute pour fournir cette infrastructure.
D&amp;rsquo;autres options incluent l&amp;rsquo;utilisation de fournisseurs tels que Sauce Labs ou Testing Bot qui fournissent un Selenium Grid en tant que service dans le cloud. Il est certainement possible d&amp;rsquo;exécuter également des nœuds sur votre propre matériel.</description>
    </item>
    
    <item>
      <title>Runner HTML</title>
      <link>https://www.selenium.dev/documentation/fr/legacy_docs/html-runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/legacy_docs/html-runner/</guid>
      <description>Selenium HTML-runner permet d&amp;rsquo;exécuter des Test Suites depuis la ligne de commande. Les Tests Suites sont des exports HTML depuis Selenium IDE ou autre outil compatible.
Informations générales  Les combinaisons de version de geckodriver / firefox / selenium-html-runner sont importantes. Il doit y avoir une matrice de compatibilité quelque part. selenium-html-runner exécute seulement des Test Suites (et non pas des Test Case, comme un export de Monitis Transaction Monitor). Assurez-vous de vous y conformer.</description>
    </item>
    
    <item>
      <title>Travailler avec les éléments select</title>
      <link>https://www.selenium.dev/documentation/fr/support_packages/working_with_select_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/support_packages/working_with_select_elements/</guid>
      <description>Certains éléments peuvent nécessiter un peu de code de plaque de chaudière pour automatiser. Pour réduire cela et rendre vos tests plus propres, il existe un Classe Select dans le package de support Selenium. Pour l&amp;rsquo;utiliser, vous aurez besoin de l&amp;rsquo;instruction d&amp;rsquo;importation suivante:
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.support.ui.Select;   from selenium.webdriver.support.select import Select   using OpenQA.Selenium.Support.UI   include Selenium::WebDriver::Support   // We don&amp;#39;t have a JavaScript code sample yet - Help us out and raise a PR    import org.</description>
    </item>
    
    <item>
      <title>Types  de test</title>
      <link>https://www.selenium.dev/documentation/fr/introduction/types_of_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/introduction/types_of_testing/</guid>
      <description>Test d&amp;rsquo;acceptation Ce type de test est effectué pour déterminer si une fonctionnalité ou un système répond aux attentes et exigences du client. Ce type de test implique généralement le client la coopération ou la rétroaction, étant une activité de validation qui répond à la question:
 Construisons-nous le produit non?.
 Pour les applications web, l&amp;rsquo;automatisation de ces tests peut se faire directement avec Selenium en simulant le comportement attendu de l&amp;rsquo;utilisateur.</description>
    </item>
    
    <item>
      <title>A propos de cette documentation</title>
      <link>https://www.selenium.dev/documentation/fr/introduction/about_this_documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/introduction/about_this_documentation/</guid>
      <description>Cette documentation, tout comme le code lui-même, est maintenue à 100% par des volontaires de la communauté Selenium. Beaucoup font partie des utilisateurs de la première heure, mais encore plus sont des utilisateurs récents, et ont donné de leur temps pour améliorer l&amp;rsquo;accueil des nouveaux utilisateurs.
Si vous rencontrez un problème avec la documentation, nous souhaitons le savoir ! La meilleure façon de communiquer un problème est de visiter https://github.com/seleniumhq/seleniumhq.github.io/issues et de vérifier si ce problème a déjà été remonté.</description>
    </item>
    
    <item>
      <title>Actions de la souris en détail</title>
      <link>https://www.selenium.dev/documentation/fr/support_packages/mouse_and_keyboard_actions_in_detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/support_packages/mouse_and_keyboard_actions_in_detail/</guid>
      <description>La souris représente un événement de souris. Les actions de la souris sont effectuées en utilisant une interface de bas niveau qui nous permet de fournir une action de saisie de périphérique virtualisé au navigateur Web.
clickAndHold Il se déplacera vers l&#39;élément et cliquera (sans le relâcher) au milieu de l&#39;élément donné.
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.chrome.ChromeDriver; import org.openqa.selenium.interactions.Actions; public class clickAndHold { public static void main(String[] args) { WebDriver driver = new ChromeDriver(); try { // Navigate to Url  driver.</description>
    </item>
    
    <item>
      <title>Bouchonner les appels externes</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/mock_external_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/mock_external_services/</guid>
      <description>L&#39;élimination des dépendances sur les services externes s&amp;rsquo;améliorera considérablement la vitesse et la stabilité de vos tests.</description>
    </item>
    
    <item>
      <title>Gmail, email and logins Facebook</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/gmail_email_and_facebook_logins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/gmail_email_and_facebook_logins/</guid>
      <description>Pour plusieurs raisons, vous connecter à des sites comme Gmail et Facebook l&amp;rsquo;utilisation de WebDriver n&amp;rsquo;est pas recommandée. En plus d&#39;être contre les conditions d&amp;rsquo;utilisation de ces sites (où vous risquez de fermer le compte), c&amp;rsquo;est lent et peu fiable.
La pratique idéale consiste à utiliser les API proposées par les fournisseurs de messagerie, ou dans le cas de Facebook le service des outils de développement qui expose une API pour créer des comptes de test, des amis, etc.</description>
    </item>
    
    <item>
      <title>Legacy Selenium IDE</title>
      <link>https://www.selenium.dev/documentation/fr/legacy_docs/selenium_ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/legacy_docs/selenium_ide/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Introduction The Selenium-IDE (Integrated Development Environment) is the tool you use to develop your Selenium test cases. It’s an easy-to-use Firefox plug-in and is generally the most efficient way to develop test cases. It also contains a context menu that allows you to first select a UI element from the browser’s currently displayed page and then select from a list of Selenium commands with parameters pre-defined according to the context of the selected UI element.</description>
    </item>
    
    <item>
      <title>Quand utiliser Grid</title>
      <link>https://www.selenium.dev/documentation/fr/grid/when_to_use_grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/grid/when_to_use_grid/</guid>
      <description>De manière générale, il existe deux raisons pour lesquelles vous souhaiterez peut-être utiliser Grid.
 Pour exécuter vos tests sur plusieurs navigateurs, plusieurs versions de navigateur, et les navigateurs fonctionnant sur différents systèmes d&amp;rsquo;exploitation. Pour réduire le temps nécessaire à la suite de tests pour terminer une passe de test.  La grille est utilisée pour accélérer l&amp;rsquo;exécution d&amp;rsquo;un test réussi en utilisant plusieurs machines pour exécuter des tests en parallèle.</description>
    </item>
    
    <item>
      <title>Réaliser des action sur l&#39;AUT*</title>
      <link>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/performing_actions_on_the_aut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/getting_started_with_webdriver/performing_actions_on_the_aut/</guid>
      <description>Il est possible de renseigner le texte d&amp;rsquo;un élément web grâce à la méthode sendKeys, comme suit:
Java Python C# Ruby JavaScript Kotlin String name = &amp;#34;Charles&amp;#34;; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(By.NAME, &amp;#34;name&amp;#34;).send_keys(name)   string name = &amp;#34;Charles&amp;#34;; driver.FindElement(By.Name(&amp;#34;name&amp;#34;)).SendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(name: &amp;#34;name&amp;#34;).send_keys(name)   const name = &amp;#34;Charles&amp;#34;; await driver.findElement(By.name(&amp;#39;name&amp;#39;)).sendKeys(name);   val name = &amp;#34;Charles&amp;#34; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name)     Certaines applications web utilisent des librairies Javascript pour ajouter des fonctionnalités de drag-and-drop.</description>
    </item>
    
    <item>
      <title>Waits</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/waits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/waits/</guid>
      <description>WebDriver peut généralement être considéré comme ayant une API de blocage. Parce que c&amp;rsquo;est une bibliothèque hors processus qui instruit le navigateur à faire, et parce que la plate-forme Web a une nature intrinsèquement asynchrone, WebDriver ne suit pas l&#39;état actif en temps réel du DOM. Cela s&amp;rsquo;accompagne de quelques défis que nous aborderons ici.
De l&amp;rsquo;expérience, la plupart des intermittents résultant de l&amp;rsquo;utilisation de Selenium et de WebDriver sont liés aux conditions de concurrence qui se produisent entre le navigateur et les instructions de l&amp;rsquo;utilisateur.</description>
    </item>
    
    <item>
      <title>Classes de support</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/support_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/support_classes/</guid>
      <description>Les classes de support WebDriver sont fournies pour simplifier la maintenance de votre code.Elles fournissent une belle abstraction pour faciliter la modélisation des éléments HTML en tant qu&amp;rsquo;objets de domaine, ainsi que des méthodes d&amp;rsquo;aide pour rendre l&amp;rsquo;utilisation de ces objets facile à raisonner.
 Stratégies de localisation Événements LoadableComponent ThreadGuard etc.  Commençons:
ThreadGuard  Cette classe est uniquement disponible dans la liaison Java
 ThreadGuard vérifie qu&amp;rsquo;un pilote est appelé uniquement à partir du même thread qui l&amp;rsquo;a créé.</description>
    </item>
    
    <item>
      <title>Dépéndence des tests</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/test_dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/test_dependency/</guid>
      <description>Une idée courante et une idée fausse concernant les tests automatisés concernent ordre de test spécifique. Vos tests devraient pouvoir s&amp;rsquo;exécuter dans n&amp;rsquo;importe quel ordre, et ne pas compter sur d&amp;rsquo;autres tests pour réussir pour réussir.</description>
    </item>
    
    <item>
      <title>Reporting amélioré</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/improved_reporting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/improved_reporting/</guid>
      <description>Le sélénium n&amp;rsquo;est pas conçu pour rendre compte de l&#39;état des cas de test courir. Profitant des capacités de rapport intégrées de l&amp;rsquo;unité les cadres de test sont un bon début. La plupart des cadres de tests unitaires ont rapports pouvant générer des rapports au format xUnit ou HTML. xUnit les rapports sont populaires pour importer des résultats dans une intégration continue (CI) comme Jenkins, Travis, Bamboo, etc. Voici quelques liens pour plus d&amp;rsquo;informations sur les sorties de rapports pour plusieurs langues.</description>
    </item>
    
    <item>
      <title>Alerts, prompts et confirmations Javascript</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/js_alerts_prompts_and_confirmations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/js_alerts_prompts_and_confirmations/</guid>
      <description>WebDriver fournit une API pour travailler avec les trois types de messages contextuels natifs proposés par JavaScript. Ces popups sont stylisés par le navigateur et offrent une personnalisation limitée.
Alerts Le plus simple d&amp;rsquo;entre eux est appelé une alerte, qui montre une message personnalisé, et un seul bouton qui rejette l&amp;rsquo;alerte, étiqueté dans la plupart des navigateurs comme OK. Il peut également être ignoré dans la plupart des navigateurs par en appuyant sur le bouton de fermeture, mais cela fera toujours la même chose que le bouton OK.</description>
    </item>
    
    <item>
      <title>Eviter de partager l&#39;état</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/avoid_sharing_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/avoid_sharing_state/</guid>
      <description>Bien que mentionné à plusieurs endroits, il convient de le mentionner à nouveau. Assurer les tests sont isolés les uns des autres.
  Ne partagez pas les données de test. Imaginez plusieurs tests qui interrogent chacun la base de données pour les commandes valides avant d&amp;rsquo;en choisir une pour effectuer une action. Devrait deux tests prenez la même commande que vous risquez d&amp;rsquo;obtenir un comportement inattendu.
  Nettoyez les données périmées dans l&amp;rsquo;application qui pourraient être récupérées par un autre test par ex.</description>
    </item>
    
    <item>
      <title>Test de performance</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/performance_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/performance_testing/</guid>
      <description>Test de performances avec Selenium et WebDriver n&amp;rsquo;est généralement pas conseillé. Pas parce qu&amp;rsquo;il est incapable mais parce qu&amp;rsquo;il n&amp;rsquo;est pas optimisé pour le travail et il est peu probable que vous obteniez de bons résultats.
Cela peut sembler idéal pour tester les performances dans le contexte de l&amp;rsquo;utilisateur mais une suite de tests WebDriver sont soumis à de nombreux points de fragilité externe et interne qui échappent à votre contrôle; par exemple la vitesse de démarrage du navigateur, vitesse des serveurs HTTP, réponse des serveurs tiers qui hébergent JavaScript ou CSS, et la pénalité d&amp;rsquo;instrumentation de l&amp;rsquo;implémentation WebDriver elle-même.</description>
    </item>
    
    <item>
      <title>Travailler avec des cookies</title>
      <link>https://www.selenium.dev/documentation/fr/support_packages/working_with_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/support_packages/working_with_cookies/</guid>
      <description>Un cookie est un petit morceau de données qui est envoyé à partir d&amp;rsquo;un site Web et stocké dans votre ordinateur. Les cookies sont principalement utilisés pour reconnaître l&amp;rsquo;utilisateur et charger les informations stockées.
L&amp;rsquo;API WebDriver fournit un moyen d&amp;rsquo;interagir avec les cookies avec des méthodes intégrées:
Add Cookie Il est utilisé pour ajouter un cookie au contexte de navigation actuel. Ajouter un cookie accepte uniquement un ensemble d&amp;rsquo;objets JSON sérialisables définis.</description>
    </item>
    
    <item>
      <title>Indépendence des tests</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/test_independency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/test_independency/</guid>
      <description>Écrivez chaque test comme sa propre unité. Écrivez les tests d&amp;rsquo;une manière qui ne sera pas dépendant d&amp;rsquo;autres tests pour effectuer:
Disons qu&amp;rsquo;il existe un système de gestion de contenu avec lequel vous pouvez créer du contenu personnalisé qui apparaît ensuite sur votre site Web sous forme de module après la publication et la synchronisation entre le CMS et le serveur peut prendre un certain temps. application.
Une mauvaise façon de tester votre module est que le contenu est créé et publié dans un test, puis vérifier le module dans un autre test.</description>
    </item>
    
    <item>
      <title>Link spidering</title>
      <link>https://www.selenium.dev/documentation/fr/worst_practices/link_spidering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/worst_practices/link_spidering/</guid>
      <description>Utilisation de WebDriver pour parcourir des liens n&amp;rsquo;est pas une pratique recommandée non pas parce que cela ne peut pas être fait, mais parce que ce n&amp;rsquo;est certainement pas l&amp;rsquo;outil le plus idéal. WebDriver a besoin de temps pour démarrer, et peut prendre plusieurs secondes jusqu&#39;à une minute en fonction de la façon dont votre test est écrit, juste pour accéder à la page et parcourir le DOM.
Au lieu d&amp;rsquo;utiliser WebDriver pour cela, vous pourriez économiser une tonne de temps en exécutant une commande curl, ou en utilisant une bibliothèque telle que BeautifulSoup puisque ces méthodes ne reposent pas sur la création d&amp;rsquo;un navigateur et la navigation vers une page.</description>
    </item>
    
    <item>
      <title>Proxys HTTP</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/http_proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/http_proxies/</guid>
      <description>Un serveur proxy sert d&amp;rsquo;intermédiaire pour les demandes entre un client et un serveur. En toute simplicité, le trafic circule via le serveur proxy en route vers l&amp;rsquo;adresse vous avez demandé et retour.
Un serveur proxy pour les scripts d&amp;rsquo;automatisation avec Le Selenium pourrait être utile pour:
 Capturez le trafic réseau Mock backend calls made by the website Accéder au site Web demandé sous un réseau complexe topologies ou restrictions / politiques d&amp;rsquo;entreprise strictes.</description>
    </item>
    
    <item>
      <title>Considerer l&#39;utilisation d&#39;une API fluent</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/consider_using_a_fluent_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/consider_using_a_fluent_api/</guid>
      <description>Martin Fowler a inventé le terme [&amp;ldquo;Fluent API&amp;rdquo;](// www.martinfowler.com/bliki/FluentInterface.html). Sélénium déjà implémente quelque chose comme ça dans leur classe FluentWait, qui est conçu comme une alternative à la classe standard Wait. Vous pouvez activer le modèle de conception de l&amp;rsquo;API Fluent dans votre objet de page puis interrogez la page de recherche Google avec un extrait de code comme celui-ci:
driver.get( &amp;#34;http://www.google.com/webhp?hl=en&amp;amp;amp;tab=ww&amp;#34; ); GoogleSearchPage gsp = new GoogleSearchPage(); gsp.withFluent().setSearchString().clickSearchButton(); La classe d&amp;rsquo;objets de page Google avec ce comportement fluide pourrait ressembler à ceci:</description>
    </item>
    
    <item>
      <title>Stratégie de chargement de la page</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/page_loading_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/page_loading_strategy/</guid>
      <description>Définit la stratégie de chargement des pages de la session en cours. Par défaut, lorsque Selenium WebDriver charge une page, il suit le normal pageLoadStrategy. Il est toujours recommandé d&amp;rsquo;arrêter le téléchargement de ressources (comme les images, css, js) lorsque le chargement de la page prend beaucoup de temps.
La propriété document.readyState d&amp;rsquo;un document décrit l&#39;état de chargement du document actuel. Par défaut, WebDriver ne répondra pas à un driver.get() (ou) driver.</description>
    </item>
    
    <item>
      <title>Nouveau navigateur par test</title>
      <link>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/fresh_browser_per_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/guidelines_and_recommendations/fresh_browser_per_test/</guid>
      <description>Commencez chaque test à partir d&amp;rsquo;un état connu propre. Idéalement, faites tourner une nouvelle machine virtuelle pour chaque test. Si la rotation d&amp;rsquo;une nouvelle machine virtuelle n&amp;rsquo;est pas pratique, démarrez au moins un nouveau WebDriver pour chaque test. Pour Firefox, démarrez un WebDriver avec votre profil connu.
FirefoxProfile profile = new FirefoxProfile(new File(&amp;#34;pathToFirefoxProfile&amp;#34;)); WebDriver driver = new FirefoxDriver(profile); </description>
    </item>
    
    <item>
      <title>Web element</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/web_element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/web_element/</guid>
      <description>WebElement représente un élément DOM. Les WebElements peuvent être trouvés en recherchant racine du document à l&amp;rsquo;aide d&amp;rsquo;une instance WebDriver ou en recherchant sous une autre WebElement
L&amp;rsquo;API WebDriver fournit des méthodes intégrées pour trouver les WebElements qui sont basé sur différentes propriétés comme ID, nom, classe, XPath, sélecteurs CSS, texte de lien, etc.
Find Element Il est utilisé pour rechercher un élément et renvoie une première référence WebElement unique correspondante, qui peut être utilisé pour de futures actions d&#39;élément</description>
    </item>
    
    <item>
      <title>Chrome Devtools</title>
      <link>https://www.selenium.dev/documentation/fr/support_packages/chrome_devtools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/support_packages/chrome_devtools/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Selenium 4 alpha versions have much awaited native support for Chrome Dev Protocol through &amp;ldquo;DevTools&amp;rdquo; interface. This helps us getting Chrome Development properties such as Application Cache, Fetch, Network, Performance, Profiler, Resource Timing, Security and Target CDP domains etc.
Chrome DevTools is a set of web developer tools built directly into the Google Chrome browser.</description>
    </item>
    
    <item>
      <title>Clavier</title>
      <link>https://www.selenium.dev/documentation/fr/webdriver/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/webdriver/keyboard/</guid>
      <description>Le clavier représente un événement KeyBoard. Les actions du clavier sont effectuées à l&amp;rsquo;aide de bas niveau interface qui nous permet de fournir une entrée d&amp;rsquo;appareil virtualisé au navigateur Web.
sendKeys SendKeys tape une séquence de touches dans l&#39;élément DOM même si une séquence de touches de modification est rencontrée. Here are the list of possible keystrokes that WebDriver Supports.
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.By;import org.openqa.selenium.Keys;import org.</description>
    </item>
    
    <item>
      <title>Contributing to the Selenium Site &amp; Documentation</title>
      <link>https://www.selenium.dev/documentation/fr/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/fr/contributing/</guid>
      <description>Selenium est un gros projet logiciel, son site et sa documentation sont essentiels comprendre comment les choses fonctionnent et apprendre des moyens efficaces d&amp;rsquo;exploiter son potentiel.
Ce projet contient à la fois le site et la documentation de Selenium. C&amp;rsquo;est un effort continu (qui ne vise aucune version spécifique) pour fournir des informations mises à jour sur la façon d&amp;rsquo;utiliser efficacement le sélénium, impliqués et comment contribuer au sélénium.
Les contributions vers le site et les documents suivent le processus décrit dans la section ci-dessous sur les contributions.</description>
    </item>
    
  </channel>
</rss>