<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebDriver on Documentación de Selenium</title>
    <link>https://www.selenium.dev/documentation/es/webdriver/</link>
    <description>Recent content in WebDriver on Documentación de Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://www.selenium.dev/documentation/es/webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entendiendo los componentes</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/understanding_the_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/understanding_the_components/</guid>
      <description>Construir una suite de test usando WebDriver requerirá que entiendas y uses de forma efectiva diferentes componentes. Como con todo en el desarrollo de software, la gente usa diferentes términos para la misma idea. A continuación hay un desglose de cómo los términos son usados en esa descripción.
Terminología  API: Interfaz de Programación de Aplicaciones. Es un conjunto de &amp;ldquo;comandos&amp;rdquo; que se utilizan para manipular el WebDriver. Library: Un módulo de código que contiene las APIs y el código necesario para implementarlos.</description>
    </item>
    
    <item>
      <title>Requerimientos de los controladores</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/driver_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/driver_requirements/</guid>
      <description>A través del WebDriver, Selenium es capaz de soportar los navegadores mas usados en el mercado como Chrom(ium), Firefox, Internet Explorer, Opera y Safari. WebDriver maneja los navegadores, cuando es posible, apoyándose en las propias funciones que el navegador incorpora para la automatización.
La finalidad del WebDriver es emular las interacciones de los usuarios reales. Esto es posible en diversos niveles en diferentes navegadores. Para mas detalles sobre las diferentes comportamientos de los controladores, ver Comportamientos del controlador.</description>
    </item>
    
    <item>
      <title>Manipulación de Navegadores</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/browser_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/browser_manipulation/</guid>
      <description>Ruby Ruby no esta instalado por defecto en Windows. Puedes descargar la ultima versión y ejecutar el instalador. Puedes dejar todos los parámetros de configuración con los valores por defecto excepto el parámetro Add Ruby executables to your PATH de la pantalla de Installation Destination and Optional Tasks. Para manejar cualquier navegador tienes que instalar la gema de Ruby selenium-webdriver. Para instalarla abre una consola de comando y ejecuta el siguiente comando.</description>
    </item>
    
    <item>
      <title>Esperas</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/waits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/waits/</guid>
      <description>Generalmente se puede decir que WebDriver posee una API de bloqueo. Porque es una biblioteca fuera-de-proceso que instruye al navegador qué hacer, y debido a que la plataforma web tiene una naturaleza intrínsecamente asíncrona, WebDriver no rastrea el estado activo y en tiempo real del DOM. Esto viene con algunos desafíos que discutiremos aquí.
Por experiencia la mayoría de las intermitencias que surgen del uso de Selenium y WebDriver están conectadas a condiciones de carrera que ocurren entre el navegador y las instrucciones del usuario.</description>
    </item>
    
    <item>
      <title>Clases de apoyo</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/support_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/support_classes/</guid>
      <description>Las clases de soporte de WebDriver son proporcionadas para simplificar el mantenimiento de tu código. Proporcionan una buena abstracción para modelar mas fácilmente elementos HTML como objetos de dominio, también proporcionando métodos de ayuda para hacer que el uso de tales objetos sea fácil de razonar. Aprenderemos acerca de:
 Estrategias de localizacion Eventos LoadableComponent ThreadGuard etc.  Iniciemos:
ThreadGuard  Esta clase solo esta disponible en la librería de enlace de Java</description>
    </item>
    
    <item>
      <title>Alertas, avisos y confirmaciones de JavaScript</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/js_alerts_prompts_and_confirmations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/js_alerts_prompts_and_confirmations/</guid>
      <description>WebDriver proporciona una API para trabajar con los tres tipos nativos de mensajes emergentes ofrecidos por JavaScript. Estas ventanas emergentes están diseñadas por el navegador y ofrecen personalización limitada.
Alertas El más simple de estos se conoce como alerta, que muestra unmensaje personalizado y un solo botón que descarta la alerta, etiquetado en la mayoría de los navegadores como OK. También se puede descartar en la mayoría de los navegadores presionando el botón de cerrar, pero esto siempre hará lo mismo que el presionar botón OK.</description>
    </item>
    
    <item>
      <title>Proxies Http</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/http_proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/http_proxies/</guid>
      <description>Un servidor proxy actúa como intermediario para solicitudes entre un cliente y un servidor. En forma simple, el tráfico fluye a través del servidor proxy en camino a la dirección solicitada y de regreso.
Un servidor proxy para scripts de automatización con Selenium podría ser útil para:
 Captura el tráfico de la red Simular llamadas de backend realizadas por el sitio web Accede al sitio web requerido bajo topologías de red complejas o restricciones/políticas corporativas estrictas.</description>
    </item>
    
    <item>
      <title>Estrategia de carga de página</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/page_loading_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/page_loading_strategy/</guid>
      <description>Define la estrategia de carga de la página en la sesión actual. Por defecto, cuando Selenium WebDriver carga una página, sigue la pageLoadStrategy normal. Siempre se recomienda detener la descarga de más recursos adicionales (como imágenes, css, js) cuando la carga de la página lleva mucho tiempo.
La propiedad document.readyState de un documento describe el estado de carga del documento actual. Por defecto, WebDriver esperará responder a una llamada driver.get() (o) driver.</description>
    </item>
    
    <item>
      <title>Elemento web</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/web_element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/web_element/</guid>
      <description>WebElement representa un elemento del DOM. Los WebElements se pueden encontrar buscando desde la raíz del documento utilizando una instancia de WebDriver o buscando en otra WebElement.
El API WebDriver proporciona métodos integrados para encontrar los elementos web que son basados en diferentes propiedades como ID, Nombre, Clase, XPath, Selectores CSS, Texto de enlace, etc.
Find Element Se utiliza para encontrar un elemento y devuelve la primera referencia única de WebElement que coincide, que puede usarse para acciones futuras con el elemento</description>
    </item>
    
    <item>
      <title>Teclado</title>
      <link>https://www.selenium.dev/documentation/es/webdriver/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/es/webdriver/keyboard/</guid>
      <description>Keyboard representa un evento del teclado. Las acciones del teclado se realizan mediante el uso de una interfaz de bajo nivel que nos permite proporcionar entradas de un dispositivo virtualizado al navegador web.
sendKeys El sendKeys escribe una secuencia de teclas en el elemento del DOM incluso si se encuentra una secuencia de teclas modificadoras. Here are the list of possible keystrokes that WebDriver Supports.
Java Python C# Ruby JavaScript Kotlin import org.</description>
    </item>
    
  </channel>
</rss>