<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebDriver 시작하기 on Selenium 문서</title>
    <link>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/</link>
    <description>Recent content in WebDriver 시작하기 on Selenium 문서</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>브라우저</title>
      <link>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/browsers/</guid>
      <description>일반적인 브라우저 Selenium 프레임워크는 공식적으로 다음과 같은 브라우저를 지원합니다.
   브라우저 관리자 지원 버전     Chrome Chromium 모든 버전   Firefox Mozilla 54 이상   Internet Explorer Selenium 6 이상   Opera Opera Chromium / Presto 10.5 이상   Safari Apple 10 이상    전문화된 브라우저 개발 환경에서 전형적으로 사용되는 특수 브라우저 세트도 있습니다.
우리는 자동화 목적으로 이러한 브라우저를 사용할 수 있으며, Selenium은 다음과 같은 전문화된 드라이버를 지원합니다.</description>
    </item>
    
    <item>
      <title>써드파티 드라이버와 플러그인</title>
      <link>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/third_party_drivers_and_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/third_party_drivers_and_plugins/</guid>
      <description>Selenium은 플러그인의 사용으로 확장될 수 있습니다.
다음은 제3자에 의해 생성되고 유지되는 많은 플러그인 입니다.
고유한 플러그인을 만들거나 플러그인이 나열되는 자세한 내용은 문서를 참조하세요.
이러한 플러그인은 Selenium 프로젝트에서 지원, 유지 관리, 호스팅 또는 보증하지 않는다는 점에서 유의하십시오.
또한 아래 나열된 플러그인이 반드시 Apache License v2.0에 따라 라이센스가 부여되지 않는다는 것을 유념하십시오.
일부 플러그인은 다른 모료 오픈소스 소프트웨어 라이센스로 사용할 수 있으며, 다른 플러그인은 독점 라이센스로만 사용할 수 있습니다.
플러그인과 해당 플러그인의 배포 라이센스에 대한 모든 질문은 해당 개발자와 함께 제기해 주세요.</description>
    </item>
    
    <item>
      <title>Element 찾기</title>
      <link>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/locating_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/locating_elements/</guid>
      <description>하나의 element 찾기 웹드라이버를 사용할 때 알아야할 가장 기본적인 테크닉 중 하나는 페이지에서 element들을 찾는 것입니다. 웹드라이버는 다양한 종류의 내장된 셀렉터 타입들을 제공해주고, 그 중 하나는 ID 속성을 통해 element들을 찾는 것입니다:
Java Python C# Ruby JavaScript Kotlin WebElement cheese = driver.findElement(By.id(&amp;#34;cheese&amp;#34;));   driver.find_element(By.ID, &amp;#34;cheese&amp;#34;)   IWebElement element = driver.FindElement(By.Id(&amp;#34;cheese&amp;#34;));   cheese = driver.find_element(id: &amp;#39;cheese&amp;#39;)   const cheese = driver.findElement(By.id(&amp;#39;cheese&amp;#39;));   val cheese: WebElement = driver.</description>
    </item>
    
    <item>
      <title>AUT*에 대한 작업 수행</title>
      <link>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/performing_actions_on_the_aut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/ko/getting_started_with_webdriver/performing_actions_on_the_aut/</guid>
      <description>sendKeys 메소드를 이용하여 element의 텍스트를 설정할 수 있습니다:
Java Python C# Ruby JavaScript Kotlin String name = &amp;#34;Charles&amp;#34;; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(By.NAME, &amp;#34;name&amp;#34;).send_keys(name)   string name = &amp;#34;Charles&amp;#34;; driver.FindElement(By.Name(&amp;#34;name&amp;#34;)).SendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(name: &amp;#34;name&amp;#34;).send_keys(name)   const name = &amp;#34;Charles&amp;#34;; await driver.findElement(By.name(&amp;#39;name&amp;#39;)).sendKeys(name);   val name = &amp;#34;Charles&amp;#34; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name)     몇몇 웹 어플리케이션들은 자바스크립트 라이브러리를 이용하여 드래그-앤-드롭 기능을 구현합니다. 아래는 하나의 element를 또다른 element로 드래그하는 가장 기본적인 예시입니다:</description>
    </item>
    
  </channel>
</rss>