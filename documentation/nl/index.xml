<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Selenium Browser Automation Project on Selenium documentatie</title>
    <link>https://www.selenium.dev/documentation/nl/</link>
    <description>Recent content in The Selenium Browser Automation Project on Selenium documentatie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://www.selenium.dev/documentation/nl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Browsers</title>
      <link>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/browsers/</guid>
      <description>Algemene browsers Selenium ondersteunt officieel volgende browsers:
   Browser Beheerder Ondersteunde versies     Chrome Chromium Alle versies   Firefox Mozilla 54 en nieuwer   Internet Explorer Selenium 6 en nieuwer   Opera Opera Chromium / Presto 10.5 en nieuwer   Safari Apple 10 en nieuwer    Gespecialiseerde browsers Er bestaan ook gespecialiseerde browser die enkel in ontwikkelomgevingen gebruikt worden. Deze kunnen ook gebruikt worden voor het automatiseren van de browser.</description>
    </item>
    
    <item>
      <title>Captchas</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/captchas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/captchas/</guid>
      <description>CAPTCHA, afkorting voor Completely Automated Public Turing test om computers en mensen apart te vertellen, is expliciet ontworpen om automatisering te voorkomen, dus probeer het niet! Er zijn twee primaire strategieÃ«n om CAPTCHA-controles te omzeilen:
 Schakel CAPTCHA&amp;rsquo;s uit in uw testomgeving Voeg een haak toe zodat tests de CAPTCHA kunnen omzeilen  </description>
    </item>
    
    <item>
      <title>Copyright and attributions</title>
      <link>https://www.selenium.dev/documentation/nl/front_matter/copyright_and_attributions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/front_matter/copyright_and_attributions/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 The Selenium Documentation Copyright &amp;copy; 2013-2020 , Software Freedom Conservancy.
Er is veel tijd en werk gestroken in het maken van deze documentatie met als doel zo correct en compleet mogelijk te zijn maar dit impliceert geen geschiktheid of garantie. Deze informatie wordt aangeboden op een &amp;ldquo;as-is&amp;rdquo; basis.</description>
    </item>
    
    <item>
      <title>Gedeelde capabilities</title>
      <link>https://www.selenium.dev/documentation/nl/driver_idiosyncrasies/shared_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/driver_idiosyncrasies/shared_capabilities/</guid>
      <description>In-order to create a new session by Selenium WebDriver, local end should provide the basic capabilities to remote end. The remote end uses the same set of capabilities to create a session and describes the current session features.
WebDriver provides capabilities that each remote end will/should support the implementation. Following are the capabilities that WebDriver supports:
browserName: This capability is used to set the browserName for a given session. If the specified browser is not installed at the remote end, the session creation will fail</description>
    </item>
    
    <item>
      <title>Installing Selenium libraries</title>
      <link>https://www.selenium.dev/documentation/nl/selenium_installation/installing_selenium_libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/selenium_installation/installing_selenium_libraries/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Installing Selenium libraries First you need to install the Selenium bindings for your automation project. The installation process for libraries depends on the language you choose to use.
Java Installation of Selenium libraries for Java can be done using Maven. Add the selenium-java dependency in your project pom.</description>
    </item>
    
    <item>
      <title>Korte uitleg</title>
      <link>https://www.selenium.dev/documentation/nl/getting_started/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/getting_started/quick/</guid>
      <description>Selenium is niet enkel een instrument of API, het bestaat uit verschillende instrumenten.
WebDriver Als je begint met het automatiseren van websites, dan zul je de WebDriver API&amp;rsquo;s gebruiken. WebDriver gebruikt automatisatie API&amp;rsquo;s die door de browsers zelf worden aangeboden. Laatstgenoemden worden gebruikt om de browser aan te sturen. Op die manier word een echte gebruiker gesimuleerd.WebDriver staat los van de applicatieve code en is daarom niet-intrusief. Zo test je dezelfde applicatie als diegene die live staat.</description>
    </item>
    
    <item>
      <title>Page object models</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/page_object_models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/page_object_models/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Page Object is a Design Pattern which has become popular in test automation for enhancing test maintenance and reducing code duplication. A page object is an object-oriented class that serves as an interface to a page of your AUT. The tests then use the methods of this page object class whenever they need to interact with the UI of that page.</description>
    </item>
    
    <item>
      <title>Purposes and main functionalities</title>
      <link>https://www.selenium.dev/documentation/nl/grid/purposes_and_main_functionalities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/grid/purposes_and_main_functionalities/</guid>
      <description> Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
  Central entry point for all tests Management and control of the nodes / environment where the browsers run Scaling Running tests in parallel Cross platform testing Load balancing  </description>
    </item>
    
    <item>
      <title>Remote WebDriver server</title>
      <link>https://www.selenium.dev/documentation/nl/remote_webdriver/remote_webdriver_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/remote_webdriver/remote_webdriver_server/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 The server will always run on the machine with the browser you want to test. The server can be used either from the command line or through code configuration.
Starting the server from the command line Once you have downloaded selenium-server-standalone-{VERSION}.jar, place it on the computer with the browser you want to test.</description>
    </item>
    
    <item>
      <title>Selenium 1 (Selenium RC)</title>
      <link>https://www.selenium.dev/documentation/nl/legacy_docs/selenium_rc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/legacy_docs/selenium_rc/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Introduction Selenium RC was the main Selenium project for a long time, before the WebDriver/Selenium merge brought up Selenium 2, a more powerful tool. It is worth to highlight that Selenium 1 is not supported anymore.
How Selenium RC Works First, we will describe how the components of Selenium RC operate and the role each plays in running your test scripts.</description>
    </item>
    
    <item>
      <title>The Selenium project and tools</title>
      <link>https://www.selenium.dev/documentation/nl/introduction/the_selenium_project_and_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/introduction/the_selenium_project_and_tools/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Selenium controls web browsers Selenium is many things but at its core, it is a toolset for web browser automation that uses the best techniques available to remotely control browser instances and emulate a user&amp;rsquo;s interaction with the browser.
It allows users to simulate common activities performed by end-users; entering text into fields, selecting drop-down values and checking boxes, and clicking links in documents.</description>
    </item>
    
    <item>
      <title>Understanding the componets</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/understanding_the_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/understanding_the_components/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Building a test suite using WebDriver will require you to understand and effectively use a number of different components. As with everything in software, different people use different terms for the same idea. Below is a breakdown of how terms are used in this description.
Terminology  API: Application Programming Interface.</description>
    </item>
    
    <item>
      <title>Components of a Grid</title>
      <link>https://www.selenium.dev/documentation/nl/grid/components_of_a_grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/grid/components_of_a_grid/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Hub  Intermediary and manager Accepts requests to run tests Takes instructions from client and executes them remotely on the nodes Manages threads  A Hub is a central point where all your tests are sent. Each Selenium Grid consists of exactly one hub. The hub needs to be reachable from the respective clients (i.</description>
    </item>
    
    <item>
      <title>Domain specific language</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/domain_specific_language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/domain_specific_language/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 A domain specific language (DSL) is a system which provides the user with an expressive means of solving a problem. It allows a user to interact with the system on their terms â not just programmer-speak.
Your users, in general, do not care how your site looks. They do not care about the decoration, animations, or graphics.</description>
    </item>
    
    <item>
      <title>Driver requirements</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/driver_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/driver_requirements/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Through WebDriver, Selenium supports all major browsers on the market such as Chrom(ium), Firefox, Internet Explorer, Opera, and Safari. Where possible, WebDriver drives the browser using the browser&amp;rsquo;s built-in support for automation, although not all browsers have official support for remote control.
WebDriver&amp;rsquo;s aim is to emulate a real user&amp;rsquo;s interaction with the browser as closely as possible.</description>
    </item>
    
    <item>
      <title>Driver specifieke capabilities</title>
      <link>https://www.selenium.dev/documentation/nl/driver_idiosyncrasies/driver_specific_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/driver_idiosyncrasies/driver_specific_capabilities/</guid>
      <description>Firefox Definieer Capabilities met FirefoxOptions FirefoxOptions is de nieuwe manier om capabilities te bepalen voor Firefox. Het is aangeraden om FirefoxOptions te gebruiken in plaats van DesiredCapabilities.
Java Python C# Ruby JavaScript Kotlin FirefoxOptions options = new FirefoxOptions(); options.addPreference(&amp;#34;network.proxy.type&amp;#34;, 0); driver = new RemoteWebDriver(options);   from selenium.webdriver.firefox.options import Options options = Options() options.headless = True driver = webdriver.Firefox(options=options)   var options = new FirefoxOptions(); options.Proxy.Kind = ProxyKind.Direct; var driver = new FirefoxDriver(options);   require &amp;#39;selenium-webdriver&amp;#39; opts = Selenium::WebDriver::Firefox::Options.</description>
    </item>
    
    <item>
      <title>Externe drivers en plugins</title>
      <link>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/third_party_drivers_and_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/third_party_drivers_and_plugins/</guid>
      <description>Selenium ondersteunt externe plugins. Hieronder vind je plugins die ontwikkeld zijn en onderhouden worden door externe partijen. Meer informatie omtrent het ontwikkelen van je eigen plugin of het publiceren ervan kan je de documentatie raadplegen.
Deze plugins worden niet ondersteund, onderhouden, gehost of aanbevolen door het Selenium project. De plugins die hieronder opgelijst staan, dragen niet altijd de Apache License v2.0. Sommige plugins vallen onder een andere gratis of open source licentie; anderen zijn enkel beschikbaar onder patent.</description>
    </item>
    
    <item>
      <title>File downloads</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/file_downloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/file_downloads/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Whilst it is possible to start a download by clicking a link with a browser under Selenium&amp;rsquo;s control, the API does not expose download progress, making it less than ideal for testing downloaded files. This is because downloading files is not considered an important aspect of emulating user interaction with the web platform.</description>
    </item>
    
    <item>
      <title>Installing WebDriver binaries</title>
      <link>https://www.selenium.dev/documentation/nl/selenium_installation/installing_webdriver_binaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/selenium_installation/installing_webdriver_binaries/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Installing WebDriver binaries To execute your project and control browser you need to have browser-specific WebDriver binaries installed.
Download the WebDriver binary supported by your browser and place it in the System PATH.</description>
    </item>
    
    <item>
      <title>Migrating from RC to WebDriver</title>
      <link>https://www.selenium.dev/documentation/nl/legacy_docs/migrating_from_rc_to_webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/legacy_docs/migrating_from_rc_to_webdriver/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 How to Migrate to Selenium WebDriver A common question when adopting Selenium 2 is what&amp;rsquo;s the correct thing to do when adding new tests to an existing set of tests? Users who are new to the framework can begin by using the new WebDriver APIs for writing their tests.</description>
    </item>
    
    <item>
      <title>On test automation</title>
      <link>https://www.selenium.dev/documentation/nl/introduction/on_test_automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/introduction/on_test_automation/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 First, start by asking yourself whether or not you really need to use a browser. Odds are that, at some point, if you are working on a complex web application, you will need to open a browser and actually test it.
Functional end-user tests such as Selenium tests are expensive to run, however.</description>
    </item>
    
    <item>
      <title>Remote WebDriver client</title>
      <link>https://www.selenium.dev/documentation/nl/remote_webdriver/remote_webdriver_client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/remote_webdriver/remote_webdriver_client/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 To run a remote WebDriver client, we first need to connect to the RemoteWebDriver. We do this by pointing the URL to the address of the server running our tests. In order to customize our configuration, we set desired capabilities. Below is an example of instantiating a remote WebDriver object pointing to our remote web server, www.</description>
    </item>
    
    <item>
      <title>Typographical conventions</title>
      <link>https://www.selenium.dev/documentation/nl/front_matter/typographical_conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/front_matter/typographical_conventions/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Capitalisation of titles One should avoid title capitalisation, such as A Very Fine Heading, and instead go for A very fine heading. Gratutious capitalisation, or title case, often show a misunderstanding of â or a disregard for â orthographic conventions. We prefer what is known as sentence case, with a single initial capital to start headers.</description>
    </item>
    
    <item>
      <title>Working with colours</title>
      <link>https://www.selenium.dev/documentation/nl/support_packages/working_with_colours/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/support_packages/working_with_colours/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 You will occasionally want to validate the colour of something as part of your tests; the problem is that colour definitions on the web are not constant. Would it not be nice if there was an easy way to compare a HEX representation of a colour with a RGB representation of a colour, or a RGBA representation of a colour with a HSLA representation of a colour?</description>
    </item>
    
    <item>
      <title>Browser manipulation</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/browser_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/browser_manipulation/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check Add Ruby executables to your PATH checkbox. To drive any browser, you have to install selenium-webdriver Ruby gem.</description>
    </item>
    
    <item>
      <title>Generating application state</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/generating_application_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/generating_application_state/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Selenium should not be used to prepare a test case. All repetitive actions and preparations for a test case, should be done through other methods. For example, most web UIs have authentication (e.g. a login form). Eliminating logging in via web browser before every test will improve both the speed and stability of the test.</description>
    </item>
    
    <item>
      <title>HTML runner</title>
      <link>https://www.selenium.dev/documentation/nl/legacy_docs/html-runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/legacy_docs/html-runner/</guid>
      <description>Met de Selenium HTML-runner kan je Test Suites starten vanaf de command line. Test Suites zijn HTML exports vanuit Selenium IDE of andere compatiebele tools.
Algemene informatie  De combinatie van geckodriver / firefox / selenium-html-runner is belangrijk. Er is mogelijks ergens een matrix die de compatibiliteit toelicht. selenium-html-runner voert enkel Test Suites uit (geen Test Case - wat bijvoorbeeld een export van Monitis Transaction Monitor is). Wees zeker dat je hieraan voldoet.</description>
    </item>
    
    <item>
      <title>HTTP response codes</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/http_response_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/http_response_codes/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 For some browser configurations in Selenium RC, Selenium acted as a proxy between the browser and the site being automated. This meant that all browser traffic passed through Selenium could be captured or manipulated. The captureNetworkTraffic() method purported to capture all of the network traffic between the browser and the site being automated, including HTTP response codes.</description>
    </item>
    
    <item>
      <title>Installing Standalone server</title>
      <link>https://www.selenium.dev/documentation/nl/selenium_installation/installing_standalone_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/selenium_installation/installing_standalone_server/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Installing Standalone server If you plan to use Grid then you should download the selenium-server-standalone JAR file. All the components are available via selenium-server. The standalone JAR contains everything, including the remote Selenium server and the client-side bindings. This means that if you use the selenium-server-standalone jar in your project, then you don&amp;rsquo;t have to add selenium-java or a browser specific jar.</description>
    </item>
    
    <item>
      <title>Localisatie van elementen</title>
      <link>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/locating_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/locating_elements/</guid>
      <description>Localisatie van elementen Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Localisatie van elementen Een van de meest fundamentele technieken die nodig zijn om WebDriver onder de knie te krijgen, is het lokaliseren van elementen op een pagina. WebDriver beschikt over een aantal ingebouwde selector types, een van hen is het lokaliseren van een element op basis van zijn ID:</description>
    </item>
    
    <item>
      <title>Setting up your own Grid</title>
      <link>https://www.selenium.dev/documentation/nl/grid/setting_up_your_own_grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/grid/setting_up_your_own_grid/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 To use Selenium Grid, you need to maintain your own infrastructure for the nodes. As this can be a cumbersome and time intense effort, many organizations use IaaS providers such as Amazon EC2 and Google Compute to provide this infrastructure.
Other options include using providers such as Sauce Labs or Testing Bot who provide a Selenium Grid as a service in the cloud.</description>
    </item>
    
    <item>
      <title>Types of testing</title>
      <link>https://www.selenium.dev/documentation/nl/introduction/types_of_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/introduction/types_of_testing/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Acceptance testing This type of testing is done to determine if a feature or system meets the customer expectations and requirements. This type of testing generally involves the customer&amp;rsquo;s cooperation or feedback, being a validation activity that answers the question:
 Are we building the right product?.</description>
    </item>
    
    <item>
      <title>Working with select elements</title>
      <link>https://www.selenium.dev/documentation/nl/support_packages/working_with_select_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/support_packages/working_with_select_elements/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Select elements can require quite a bit of boiler plate code to automate. To reduce this and make your tests cleaner, there is a Select class in the Selenium support package. To use it, you will need the following import statement:
Java Python C# Ruby JavaScript Kotlin import org.</description>
    </item>
    
    <item>
      <title>About this documentation</title>
      <link>https://www.selenium.dev/documentation/nl/introduction/about_this_documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/introduction/about_this_documentation/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 These docs, like the code itself, are maintained 100% by volunteers within the Selenium community. Many have been using it since its inception, but many more have only been using it for a short while, and have given their time to help improve the onboarding experience for new users.</description>
    </item>
    
    <item>
      <title>Acties op de AUT*</title>
      <link>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/performing_actions_on_the_aut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/getting_started_with_webdriver/performing_actions_on_the_aut/</guid>
      <description>Je kan de tekst van een element invullen aan de hand van de sendKeys methode:
Java Python C# Ruby JavaScript Kotlin String name = &amp;#34;Charles&amp;#34;; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(By.NAME, &amp;#34;name&amp;#34;).send_keys(name)   string name = &amp;#34;Charles&amp;#34;; driver.FindElement(By.Name(&amp;#34;name&amp;#34;)).SendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(name: &amp;#34;name&amp;#34;).send_keys(name)   const name = &amp;#34;Charles&amp;#34;; await driver.findElement(By.name(&amp;#39;name&amp;#39;)).sendKeys(name);   val name = &amp;#34;Charles&amp;#34; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name)     Sommige applicaties gebruiken Javascript libraries om drag-en-drop functionaliteit toe te voegen.</description>
    </item>
    
    <item>
      <title>Details van muisactie</title>
      <link>https://www.selenium.dev/documentation/nl/support_packages/mouse_and_keyboard_actions_in_detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/support_packages/mouse_and_keyboard_actions_in_detail/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Mouse represents a mouse event. Mouse actions are performed by using low-level interface which allows us to provide virtualized device input action to the web browser.
clickAndHold It will move to the element and clicks (without releasing) in the middle of the given element.
Java Python C# Ruby JavaScript Kotlin import org.</description>
    </item>
    
    <item>
      <title>Gmail, email and Facebook logins</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/gmail_email_and_facebook_logins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/gmail_email_and_facebook_logins/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 For multiple reasons, logging into sites like Gmail and Facebook using WebDriver is not recommended. Aside from being against the usage terms for these sites (where you risk having the account shut down), it is slow and unreliable.
The ideal practice is to use the APIs that email providers offer, or in the case of Facebook the developer tools service which exposes an API for creating test accounts, friends and so forth.</description>
    </item>
    
    <item>
      <title>Legacy Selenium IDE</title>
      <link>https://www.selenium.dev/documentation/nl/legacy_docs/selenium_ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/legacy_docs/selenium_ide/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Introduction The Selenium-IDE (Integrated Development Environment) is the tool you use to develop your Selenium test cases. Itâs an easy-to-use Firefox plug-in and is generally the most efficient way to develop test cases. It also contains a context menu that allows you to first select a UI element from the browserâs currently displayed page and then select from a list of Selenium commands with parameters pre-defined according to the context of the selected UI element.</description>
    </item>
    
    <item>
      <title>Mock external services</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/mock_external_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/mock_external_services/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Eliminating the dependencies on external services will greatly improve the speed and stability of your tests.</description>
    </item>
    
    <item>
      <title>Waits</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/waits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/waits/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 WebDriver can generally be said to have a blocking API. Because it is an out-of-process library that instructs the browser what to do, and because the web platform has an intrinsically asynchronous nature, WebDriver doesn&amp;rsquo;t track the active, real-time state of the DOM. This comes with some challenges that we will discuss here.</description>
    </item>
    
    <item>
      <title>When to use Grid</title>
      <link>https://www.selenium.dev/documentation/nl/grid/when_to_use_grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/grid/when_to_use_grid/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Generally speaking, thereâs two reasons why you might want to use Grid.
 To run your tests against multiple browsers, multiple versions of browser, and browsers running on different operating systems. To reduce the time it takes for the test suite to complete a test pass.  Grid is used to speed up the execution of a test pass by using multiple machines to run tests in parallel.</description>
    </item>
    
    <item>
      <title>Improved reporting</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/improved_reporting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/improved_reporting/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Selenium is not designed to report on the status of test cases run. Taking advantage of the built-in reporting capabilities of unit test frameworks is a good start. Most unit test frameworks have reports that can generate xUnit or HTML formatted reports. xUnit reports are popular for importing results to a Continuous Integration (CI) server like Jenkins, Travis, Bamboo, etc.</description>
    </item>
    
    <item>
      <title>Support classes</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/support_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/support_classes/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 WebDriver support classes are provided to simplify maintaining your code. They provide a nice abstraction to make modeling HTML element(s) as domain objects easier, also providing helper methods to make using such objects easy to reason about. We will learn about:
 Locator Strategies Events LoadableComponent ThreadGuard etc.</description>
    </item>
    
    <item>
      <title>Test dependency</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/test_dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/test_dependency/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 A common idea and misconception about automated testing is regarding a specific test order. Your tests should be able to run in any order, and not rely on other tests to complete in order to be successful.</description>
    </item>
    
    <item>
      <title>Avoid sharing state</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/avoid_sharing_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/avoid_sharing_state/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Although mentioned in several places it is worth mentioning again. Ensure tests are isolated from one another.
  Do not share test data. Imagine several tests that each query the database for valid orders before picking one to perform an action on. Should two tests pick up the same order you are likely to get unexpected behaviour.</description>
    </item>
    
    <item>
      <title>JavaScript alerts, prompts and confirmations</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/js_alerts_prompts_and_confirmations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/js_alerts_prompts_and_confirmations/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 WebDriver provides an API for working with the three types of native popup message offered by JavaScript. These popups are styled by the browser and offer limited customisation.
Alerts The simplest of these is referred to as an alert, which shows a custom message, and a single button which dismisses the alert, labelled in most browsers as OK.</description>
    </item>
    
    <item>
      <title>Performance testing</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/performance_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/performance_testing/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Performance testing using Selenium and WebDriver is generally not advised. Not because it is incapable but because it is not optimised for the job and you are unlikely to get good results.
It may seem ideal to performance test in the context of the user but a suite of WebDriver tests are subjected to many points of external and internal fragility which are beyond your control; for example browser startup speed, speed of HTTP servers, response of third party servers that host JavaScript or CSS, and the instrumentation penalty of the WebDriver implementation itself.</description>
    </item>
    
    <item>
      <title>Working with cookies</title>
      <link>https://www.selenium.dev/documentation/nl/support_packages/working_with_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/support_packages/working_with_cookies/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 A cookie is a small piece of data that is sent from a website and stored in your computer. Cookies are mostly used to recognise the user and load the stored information.
WebDriver API provides a way to interact with cookies with built-in methods:
Add Cookie It is used to add a cookie to the current browsing context.</description>
    </item>
    
    <item>
      <title>Http proxies</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/http_proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/http_proxies/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 A proxy server acts as an intermediary for requests between a client and a server. In simple, the traffic flows through the proxy server on its way to the address you requested and back.
A proxy server for automation scripts with Selenium could be helpful for:
 Capture network traffic Mock backend calls made by the website Access the required website under complex network topologies or strict corporate restrictions/policies.</description>
    </item>
    
    <item>
      <title>Link spidering</title>
      <link>https://www.selenium.dev/documentation/nl/worst_practices/link_spidering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/worst_practices/link_spidering/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Using WebDriver to spider through links is not a recommended practice not because it cannot be done, but because itâs definitely not the most ideal tool. WebDriver needs time to start up, and can take several seconds up to a minute depending on how your test is written, just to get to the page and traverse through the DOM.</description>
    </item>
    
    <item>
      <title>Test independency</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/test_independency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/test_independency/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Write each test as its own unit. Write the tests in a way that will not be reliant on other tests to complete:
Let us say there is a content management system with which you can create some custom content which then appears on your website as a module after publishing, and it may take some time to sync between the CMS and the application.</description>
    </item>
    
    <item>
      <title>Consider using a fluent API</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/consider_using_a_fluent_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/consider_using_a_fluent_api/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Martin Fowler coined the term &amp;ldquo;Fluent API&amp;rdquo;. Selenium already implements something like this in their FluentWait class, which is meant as an alternative to the standard Waitclass. You could enable the Fluent API design pattern in your page object and then query the Google search page with a code snippet like this one:</description>
    </item>
    
    <item>
      <title>Page loading strategy</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/page_loading_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/page_loading_strategy/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Defines the current session&amp;rsquo;s page loading strategy. By default, when Selenium WebDriver loads a page, it follows the normal pageLoadStrategy. It is always recommended to stop downloading additional resources (like images, css, js) when the page loading takes lot of time.
The document.readyState property of a document describes the loading state of the current document.</description>
    </item>
    
    <item>
      <title>Fresh browser per test</title>
      <link>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/fresh_browser_per_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/guidelines_and_recommendations/fresh_browser_per_test/</guid>
      <description> Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Start each test from a clean known state. Ideally, spin up a new virtual machine for each test. If spinning up a new virtual machine is not practical, at least start a new WebDriver for each test. For Firefox, start a WebDriver with your known profile.
FirefoxProfile profile = new FirefoxProfile(new File(&amp;#34;pathToFirefoxProfile&amp;#34;)); WebDriver driver = new FirefoxDriver(profile); </description>
    </item>
    
    <item>
      <title>Web element</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/web_element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/web_element/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 WebElement represents a DOM element. WebElements can be found by searching from the document root using a WebDriver instance, or by searching under another WebElement.
WebDriver API provides built-in methods to find the WebElements which are based on different properties like ID, Name, Class, XPath, CSS Selectors, link Text, etc.</description>
    </item>
    
    <item>
      <title>Chrome Devtools</title>
      <link>https://www.selenium.dev/documentation/nl/support_packages/chrome_devtools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/support_packages/chrome_devtools/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Selenium 4 alpha versions have much awaited native support for Chrome Dev Protocol through &amp;ldquo;DevTools&amp;rdquo; interface. This helps us getting Chrome Development properties such as Application Cache, Fetch, Network, Performance, Profiler, Resource Timing, Security and Target CDP domains etc.
Chrome DevTools is a set of web developer tools built directly into the Google Chrome browser.</description>
    </item>
    
    <item>
      <title>Keyboard</title>
      <link>https://www.selenium.dev/documentation/nl/webdriver/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/webdriver/keyboard/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Keyboard represents a KeyBoard event. KeyBoard actions are performed by using low-level interface which allows us to provide virtualized device input to the web browser.
sendKeys The sendKeys types a key sequence in DOM element even if modifier key sequence is encountered. Here are the list of possible keystrokes that WebDriver Supports.</description>
    </item>
    
    <item>
      <title>Contributing to the Selenium Documentation</title>
      <link>https://www.selenium.dev/documentation/nl/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.selenium.dev/documentation/nl/contributing/</guid>
      <description>Page being translated from English to Dutch. Do you speak Dutch? Help us to translate it by sending us pull requests!
 Selenium is a big software project, its site and documentation are key to understanding how things work and learning effective ways to exploit its potential.
This project contains both Selenium&amp;rsquo;s site and documentation. This is an ongoing effort (not targeted at any specific release) to provide updated information on how to use Selenium effectively, how to get involved and how to contribute to Selenium.</description>
    </item>
    
  </channel>
</rss>